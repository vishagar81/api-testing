{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2020-01-13T10:23:57.857Z",
    "end": "2020-01-13T10:24:00.506Z",
    "duration": 2649,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0fa10723-98ba-4799-8621-f7a565378da5",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7e496d22-6fe2-4765-b6a3-773148e3bd40",
          "title": "Direct Debit Details Service",
          "fullFile": "/Users/vishal.agarwalnationwide.co.uk/workspace/api-testing/test/direct-debit-details_test.js",
          "file": "/test/direct-debit-details_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a 200 response, valid sortcode and account number",
              "fullTitle": "Direct Debit Details Service should return a 200 response, valid sortcode and account number",
              "timedOut": false,
              "duration": 528,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.post(\"/sendevent\")\n    .set(\"Accept\", 'application/json')\n    .send({\n        \"type\": \"@NBS/HOME_FTB_CASE_DDDETAILS\",\n        \"payload\": {\n            \"nameOnAccount\": \"vishal agarwal\",\n            \"accountNumber\": \"00019987\",\n            \"preferredPaymentDay\": \"1st\",\n            \"sortCode\": \"070246\"\n        },\n        \"meta\": {\n            \"applicationId\": `${applicationId}`\n        }\n    })\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .end(function(err, res){\n        console.log(\"Error\", err);\n        console.log(\"Error reponse\", res.body);\n        expect(res.body).to.have.property(\"payload\");\n        expect(res.body.payload).to.not.equal(null);\n        \n        expect(res.body.payload).to.have.property(\"validateDirectDebitDetailsResult\");\n        expect(res.body.payload.validateDirectDebitDetailsResult).to.have.property(\"sortCodeAndAccountNumberCheckDecision\");\n        expect(res.body.payload.validateDirectDebitDetailsResult.sortCodeAndAccountNumberCheckDecision).to.equal(\"PASS\");\n        expect(res.body.payload.validateDirectDebitDetailsResult).to.have.property(\"sortCodeAndAccountNumberCheckDecisionMessage\");\n        expect(res.body.payload.validateDirectDebitDetailsResult.sortCodeAndAccountNumberCheckDecisionMessage).to.equal(\"You have setup your Direct Debit.\");\n        \n        done();\n    });",
              "err": {},
              "uuid": "a8ae5090-c6f4-4585-ba63-f3df796b1331",
              "parentUUID": "7e496d22-6fe2-4765-b6a3-773148e3bd40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a 200 response, invalid sortcode and account number",
              "fullTitle": "Direct Debit Details Service should return a 200 response, invalid sortcode and account number",
              "timedOut": false,
              "duration": 474,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.post(\"/sendevent\")\n    .set(\"Accept\", 'application/json')\n    .send({\n        \"type\": \"@NBS/HOME_FTB_CASE_DDDETAILS\",\n        \"payload\": {\n            \"nameOnAccount\": \"vishal agarwal\",\n            \"accountNumber\": \"00019987\",\n            \"preferredPaymentDay\": \"1st\",\n            \"sortCode\": \"070234\"\n        },\n        \"meta\": {\n            \"applicationId\": `${applicationId}`\n        }\n    })\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .end(function(err, res){\n        // console.log(\"Error\", err);\n        // console.log(\"Error reponse\", res.body);\n        expect(res.body).to.have.property(\"payload\");\n        expect(res.body.payload).to.not.equal(null);\n        \n        expect(res.body.payload).to.have.property(\"validateDirectDebitDetailsResult\");\n        expect(res.body.payload.validateDirectDebitDetailsResult).to.have.property(\"sortCodeAndAccountNumberCheckDecision\");\n        expect(res.body.payload.validateDirectDebitDetailsResult.sortCodeAndAccountNumberCheckDecision).to.equal(\"SORT_CODE_FAIL\");\n        expect(res.body.payload.validateDirectDebitDetailsResult).to.have.property(\"sortCodeAndAccountNumberCheckDecisionMessage\");\n        expect(res.body.payload.validateDirectDebitDetailsResult.sortCodeAndAccountNumberCheckDecisionMessage).to.equal(\"Sorry, the sort code provided cannot be found. Please enter a valid sort code.\");\n        \n        done();\n    });",
              "err": {},
              "uuid": "40d718a0-d327-4ab4-8184-b150ae6ae24b",
              "parentUUID": "7e496d22-6fe2-4765-b6a3-773148e3bd40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a 200 response, valid sortcode and invalid account number",
              "fullTitle": "Direct Debit Details Service should return a 200 response, valid sortcode and invalid account number",
              "timedOut": false,
              "duration": 419,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.post(\"/sendevent\")\n    .set(\"Accept\", 'application/json')\n    .send({\n        \"type\": \"@NBS/HOME_FTB_CASE_DDDETAILS\",\n        \"payload\": {\n            \"nameOnAccount\": \"vishal agarwal\",\n            \"accountNumber\": \"01234567\",\n            \"preferredPaymentDay\": \"2nd\",\n            \"sortCode\": \"070246\"\n        },\n        \"meta\": {\n            \"applicationId\": `${applicationId}`\n        }\n    })\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .end(function(err, res){\n        // console.log(\"Error\", err);\n        // console.log(\"Error reponse\", res.body);\n        expect(res.body).to.have.property(\"payload\");\n        expect(res.body.payload).to.not.equal(null);\n        \n        expect(res.body.payload).to.have.property(\"validateDirectDebitDetailsResult\");\n        expect(res.body.payload.validateDirectDebitDetailsResult).to.have.property(\"sortCodeAndAccountNumberCheckDecision\");\n        expect(res.body.payload.validateDirectDebitDetailsResult.sortCodeAndAccountNumberCheckDecision).to.equal(\"ACCOUNT_NUMBER_FAIL\");\n        expect(res.body.payload.validateDirectDebitDetailsResult).to.have.property(\"sortCodeAndAccountNumberCheckDecisionMessage\");\n        expect(res.body.payload.validateDirectDebitDetailsResult.sortCodeAndAccountNumberCheckDecisionMessage).to.equal(\"Sorry, the account number provided is not valid. Please enter a valid account number.\");\n        \n        done();\n    });",
              "err": {},
              "uuid": "c927f887-2205-4dfc-bcef-34d3d3d1300f",
              "parentUUID": "7e496d22-6fe2-4765-b6a3-773148e3bd40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a 200 response, invalid sortcode and invalid account number",
              "fullTitle": "Direct Debit Details Service should return a 200 response, invalid sortcode and invalid account number",
              "timedOut": false,
              "duration": 477,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.post(\"/sendevent\")\n    .set(\"Accept\", 'application/json')\n    .send({\n        \"type\": \"@NBS/HOME_FTB_CASE_DDDETAILS\",\n        \"payload\": {\n            \"nameOnAccount\": \"vishal agarwal\",\n            \"accountNumber\": \"87654321\",\n            \"preferredPaymentDay\": \"23rd\",\n            \"sortCode\": \"070212\"\n        },\n        \"meta\": {\n            \"applicationId\": `${applicationId}`\n        }\n    })\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .end(function(err, res){\n        // console.log(\"Error\", err);\n        // console.log(\"Error reponse\", res.body);\n        expect(res.body).to.have.property(\"payload\");\n        expect(res.body.payload).to.not.equal(null);\n        \n        expect(res.body.payload).to.have.property(\"validateDirectDebitDetailsResult\");\n        expect(res.body.payload.validateDirectDebitDetailsResult).to.have.property(\"sortCodeAndAccountNumberCheckDecision\");\n        expect(res.body.payload.validateDirectDebitDetailsResult.sortCodeAndAccountNumberCheckDecision).to.equal(\"SORT_CODE_FAIL\");\n        expect(res.body.payload.validateDirectDebitDetailsResult).to.have.property(\"sortCodeAndAccountNumberCheckDecisionMessage\");\n        expect(res.body.payload.validateDirectDebitDetailsResult.sortCodeAndAccountNumberCheckDecisionMessage).to.equal(\"Sorry, the sort code provided cannot be found. Please enter a valid sort code.\");\n        \n        done();\n    });",
              "err": {},
              "uuid": "6042a8cb-694d-40f5-bff1-ebce2d3d0300",
              "parentUUID": "7e496d22-6fe2-4765-b6a3-773148e3bd40",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a8ae5090-c6f4-4585-ba63-f3df796b1331",
            "40d718a0-d327-4ab4-8184-b150ae6ae24b",
            "c927f887-2205-4dfc-bcef-34d3d3d1300f",
            "6042a8cb-694d-40f5-bff1-ebce2d3d0300"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1898,
          "root": false,
          "rootEmpty": false,
          "_timeout": 25000
        },
        {
          "uuid": "5d448598-7f2b-40a5-aaf9-32ca19b07f08",
          "title": "Fraud Service",
          "fullFile": "/Users/vishal.agarwalnationwide.co.uk/workspace/api-testing/test/fraud_test.js",
          "file": "/test/fraud_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a 200 response, valid reason and comments",
              "fullTitle": "Fraud Service should return a 200 response, valid reason and comments",
              "timedOut": false,
              "duration": 363,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.post(\"/sendevent\")\n    .set(\"Accept\", 'application/json')\n    .send({\n        \"type\": \"@NBS/HOME_FTB_CASE_FRAUD\",\n        \"payload\": {\n            \"isAlreadyReferred\": false,\n            \"reason\": \"userReferral\",\n            \"comments\": \"Some referral comments\"\n        },\n        \"meta\": {\n            \"applicationId\": `${applicationId}`\n        }\n    })\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .end(function(err, res){\n        console.log(\"Error\", err);\n        console.log(\"Error reponse\", res.body);\n        expect(res.body).to.have.property(\"payload\");\n        expect(res.body.payload).to.not.equal(null);\n        \n        expect(res.body.payload).to.have.property(\"comments\");\n        expect(res.body.payload.comments).to.not.equal(null);\n        expect(res.body.payload.comments).to.equal(\"Some referral comments\");\n        expect(res.body.payload).to.have.property(\"reason\");\n        expect(res.body.payload.reason).to.not.equal(null);\n        expect(res.body.payload.reason).to.equal(\"userReferral\");\n        done();\n    });",
              "err": {},
              "uuid": "48f0be16-ff89-459d-8760-f6d21806e7a5",
              "parentUUID": "5d448598-7f2b-40a5-aaf9-32ca19b07f08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a 200 response, for a case marked fraud (manual)",
              "fullTitle": "Fraud Service should return a 200 response, for a case marked fraud (manual)",
              "timedOut": false,
              "duration": 378,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "api.post(\"/sendevent\")\n    .set(\"Accept\", 'application/json')\n    .send({\n        \"type\": \"@NBS/HOME_FTB_CASE_GET_FRAUD\",\n        \"payload\": {},\n        \"meta\": {\n            \"applicationId\": `${applicationId}`\n        }\n    })\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .end(function(err, res){\n        console.log(\"Error\", err);\n        console.log(\"Error reponse\", res.body);\n        expect(res.body).to.have.property(\"payload\");\n        expect(res.body.payload).to.not.equal(null);\n        expect(res.body).to.have.property(\"type\");\n        expect(res.body.payload).to.not.equal(\"@NBS/HOME_FTB_CASE_GET_FRAUD_RESULT\");\n        \n        expect(res.body.payload).to.have.property(\"comments\");\n        expect(res.body.payload.comments).to.not.equal(null);\n        expect(res.body.payload.comments).to.equal(\"Some referral comments\");\n        expect(res.body.payload).to.have.property(\"reason\");\n        expect(res.body.payload.reason).to.not.equal(null);\n        expect(res.body.payload.reason).to.equal(\"userReferral\");\n        expect(res.body.payload).to.have.property(\"requestedBy\");\n        expect(res.body.payload.requestedBy).to.not.equal(null);\n        expect(res.body.payload.requestedBy).to.equal(\"QA\"); // TODO: check that\n        expect(res.body.payload).to.have.property(\"requesterRole\");\n        expect(res.body.payload.requesterRole).to.not.equal(null);\n        expect(res.body.payload.requesterRole).to.equal(\"MC\");  // TODO: check that\n        expect(res.body.payload).to.have.property(\"requestedDate\");\n        expect(res.body.payload.requestedDate).to.not.equal(null);\n        done();\n    });",
              "err": {},
              "uuid": "1b5d0bf2-d716-4c3d-a037-5c0f64743c5c",
              "parentUUID": "5d448598-7f2b-40a5-aaf9-32ca19b07f08",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "48f0be16-ff89-459d-8760-f6d21806e7a5",
            "1b5d0bf2-d716-4c3d-a037-5c0f64743c5c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 741,
          "root": false,
          "rootEmpty": false,
          "_timeout": 25000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 25000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.0.1"
    }
  }
}